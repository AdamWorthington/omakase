/*
 * Copyright (C) 2013 salesforce.com, inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.salesforce.omakase.test.util.tool;

import com.google.common.collect.ComparisonChain;
import com.google.common.collect.Lists;
import com.salesforce.omakase.ast.Syntax;
import com.salesforce.omakase.emitter.Description;
import com.salesforce.omakase.emitter.Subscribable;
import org.reflections.Reflections;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * Lists all {@link Subscribable} {@link Syntax} units.
 *
 * @author nmcwilliams
 */
@SuppressWarnings("JavaDoc")
public final class SubscribableSyntaxTable {
    private SubscribableSyntaxTable() {}

    public static void main(String[] args) {
        Reflections reflections = new Reflections("com.salesforce.omakase.ast");
        List<Class<?>> list = Lists.newArrayList(reflections.getTypesAnnotatedWith(Subscribable.class));

        Collections.sort(list, new Comparator<Class<?>>() {
            @Override
            public int compare(Class<?> class1, Class<?> class2) {
                return ComparisonChain.start()
                    .compare(class1.getPackage().getName(), class2.getPackage().getName())
                    .compareTrueFirst(class1.isInterface(), class2.isInterface())
                    .compare(class1.getSimpleName(), class2.getSimpleName())
                    .result();
            }
        });

        System.out.println();

        String header = "%s%-28s   %-55s   %-25s   %s";
        String line1 = String.format(header,
            space(4),
            "Name",
            "Description",
            "Enablement / Dependency",
            "Type");

        String line2 = String.format(header,
            space(4),
            dash(28),
            dash(55),
            dash(25),
            dash(15));

        System.out.println(line1);
        System.out.println(line2);

        int i = 1;
        for (Class<?> klass : list) {
            Description d = klass.getAnnotation(Description.class);
            if (d == null) throw new RuntimeException("missing @Description for " + klass);

            String s = "%02d: %-28s   %-55s   %-25s   %s";
            System.out.println(String.format(s,
                i++,
                klass.getSimpleName(),
                d.value(),
                d.broadcasted(),
                type(klass)));
        }

        System.out.println("\nGenerated by " + SubscribableSyntaxTable.class.getSimpleName() + ".java");
    }

    private static String type(Class<?> klass) {
        return klass.isInterface() ? "interface" : "class";
    }

    private static String space(int number) {
        return repeat(" ", number);
    }

    private static String dash(int number) {
        return repeat("-", number);
    }

    private static String repeat(String string, int number) {
        return new String(new char[number]).replace("\0", string);
    }
}
